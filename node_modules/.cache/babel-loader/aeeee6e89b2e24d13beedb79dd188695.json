{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flavi\\\\Desktop\\\\rocketseat\\\\dtmoney\\\\src\\\\TransactionsContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { api } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext({});\nexport function TransactionsProvider({\n  children\n}) {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions').then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  function createTransaction(transaction) {\n    api.post('/transactions', transaction);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionsProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["C:/Users/flavi/Desktop/rocketseat/dtmoney/src/TransactionsContext.tsx"],"names":["createContext","useEffect","useState","api","TransactionsContext","TransactionsProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transaction","post"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAA8D,OAA9D;AACA,SAASC,GAAT,QAAoB,gBAApB;;AA+BA,OAAO,MAAMC,mBAAmB,gBAAGJ,aAAa,CAC5C,EAD4C,CAAzC;AAKP,OAAO,SAASK,oBAAT,CAA8B;AAAEC,EAAAA;AAAF,CAA9B,EAAuE;AAAA;;AAC1E,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAgB,EAAhB,CAAhD;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,GAAG,CAACM,GAAJ,CAAQ,cAAR,EACKC,IADL,CACUC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADrC;AAEH,GAHQ,EAGN,EAHM,CAAT;;AAKA,WAASM,iBAAT,CAA2BC,WAA3B,EAA0D;AAEtDX,IAAAA,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA0BD,WAA1B;AACH;;AAGD,sBACI,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAE;AAACP,MAAAA,YAAD;AAAeM,MAAAA;AAAf,KAArC;AAAA,cACKP;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GApBeD,oB;;KAAAA,oB","sourcesContent":["import { createContext, useEffect, useState, ReactNode } from 'react';\r\nimport { api } from './services/api';\r\n\r\n\r\n\r\ninterface Transaction {\r\n    id: number;\r\n    title: string;\r\n    amount: number;\r\n    type: string;\r\n    category: string;\r\n    createdAt: string;\r\n}\r\n\r\n/*interface TransactionInput {\r\n    title: string;\r\n    amount: number;\r\n    type: string;\r\n    category: string;\r\n}\r\n*/\r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;   \r\n\r\ninterface TransactionsProviderProps {\r\n    children: ReactNode;\r\n}\r\n\r\ninterface TransactionsContextData {\r\n    transactions: Transaction[];\r\n    createTransaction: (transaction: TransactionInput) => void;\r\n}\r\nexport const TransactionsContext = createContext<TransactionsContextData>(\r\n    {} as TransactionsContextData\r\n    );\r\n\r\n\r\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\r\n    const [transactions, setTransactions] = useState<Transaction[]>([])\r\n\r\n\r\n    useEffect(() => {\r\n        api.get('transactions')\r\n            .then(response => setTransactions(response.data.transactions))\r\n    }, []);\r\n\r\n    function createTransaction(transaction: TransactionInput) {\r\n        \r\n        api.post('/transactions', transaction)\r\n    }\r\n\r\n\r\n    return (\r\n        <TransactionsContext.Provider value={{transactions, createTransaction}}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}